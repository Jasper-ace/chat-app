import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'login_screen.dart';

class ChatScreen extends StatefulWidget {
  final int receiverId;
  final String receiverType;

  const ChatScreen({
    super.key,
    required this.receiverId,
    required this.receiverType,
  });

  @override
  State<ChatScreen> createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  final TextEditingController _messageController = TextEditingController();
  List messages = [];
  String? _token;
  int? _userId;
  String? _userType;
  String _userName = '';

  @override
  void initState() {
    super.initState();
    _loadUserData().then((_) {
      fetchUserName();
      fetchMessages();
    });
  }

  Future<void> _loadUserData() async {
    final prefs = await SharedPreferences.getInstance();
    _token = prefs.getString('authToken');
    _userId = prefs.getInt('userId');
    _userType = prefs.getString('userType');
  }

  Future<void> fetchUserName() async {
    if (_token == null || _userId == null || _userType == null) return;

    final url = Uri.parse('http://192.168.1.6:8000/api/${_userType}s/${_userId}');
    final response = await http.get(url, headers: {
      "Authorization": "Bearer $_token",
      "Accept": "application/json",
    });

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      setState(() {
        _userName = _userType == 'tradie'
            ? '${data['data']['first_name']} ${data['data']['last_name']}'
            : data['data']['name'];
      });
    }
  }

  Future<void> fetchMessages() async {
    if (_token == null) return;

    final url = Uri.parse(
        'http://192.168.1.6:8000/api/messages/${widget.receiverId}/${widget.receiverType}');

    final response = await http.get(
      url,
      headers: {
        "Authorization": "Bearer $_token",
        "Accept": "application/json",
      },
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      setState(() {
        messages = data['data'];
      });
    }
  }

  Future<void> sendMessage() async {
    final text = _messageController.text.trim();
    if (text.isEmpty || _token == null) return;

    final url = Uri.parse('http://192.168.1.6:8000/api/messages/send');

    final response = await http.post(
      url,
      headers: {
        "Authorization": "Bearer $_token",
        "Content-Type": "application/json",
      },
      body: jsonEncode({
        "receiver_id": widget.receiverId,
        "receiver_type": widget.receiverType,
        "message": text,
      }),
    );

    if (response.statusCode == 201) {
      _messageController.clear();
      fetchMessages();
    }
  }

  Future<void> logout() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.clear();
    Navigator.pushAndRemoveUntil(
        context,
        MaterialPageRoute(builder: (_) => const LoginScreen()),
        (route) => false);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_userName.isEmpty ? "Chat" : _userName),
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: logout,
          ),
        ],
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              itemCount: messages.length,
              itemBuilder: (context, index) {
                final msg = messages[index];

                // Align right if the message was sent by the logged-in user
                final isMine =
                    (msg['sender_type'].toString().toLowerCase() == _userType &&
                        msg['sender_id'] == _userId);

                return Align(
                  alignment: isMine ? Alignment.centerRight : Alignment.centerLeft,
                  child: Container(
                    padding: const EdgeInsets.all(10),
                    margin: const EdgeInsets.symmetric(vertical: 4, horizontal: 8),
                    decoration: BoxDecoration(
                      color: isMine ? Colors.blue[200] : Colors.grey[300],
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Text(msg['message']),
                  ),
                );
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _messageController,
                    decoration:
                        const InputDecoration(hintText: "Enter message"),
                  ),
                ),
                IconButton(
                  icon: const Icon(Icons.send),
                  onPressed: sendMessage,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
